#!urs/bin/env python3.5

import sys
import csv
import os
from multiprocessing import Process, Queue
import getopt
import configparser
import datetime

# read the social security & tax configuration and store in a dictionary

class Config(object):

    def __init__(self, configfile, city):
        
        self.config = {}
        self._update(configfile, city)
        
    def _update(self, configfile, city):
        cp = configparser.ConfigParser()
        cp.read(configfile)
        sections = cp.sections()
        
        if city in sections:
            item = cp.items(city)
            for data in item: #type of item is list
                key, value = data
                self.config[key] = float(value)
            
        else:
            item = cp.defaults() #type of item is OrderedDict
            for key, value in item.items():
                self.config[key] = float(value)
		
        return self.config

# read the employee's data, and store in a dictionary

class UserData():

    def __init__(self):

        self.userdata = {}       
        
    def _update(self, userdatafile, queue):
	
        try:
            file_ = open(userdatafile, 'r')
            for i, x in enumerate(file_):
                key, value = x.split(',')
                self.userdata[key] = int(value)
            file_.close()
            queue.put(self.userdata)
        
        except IOError:
            print('file does not exit or can not be read')
            exit()

# Calculate all the tax and social security charge, put each employee's
# result into a list as a sublist.

class IncomeTaxCalculator():

    def __init__(self):

        self.usergongzi = []

    def calc_for_all_userdata(self, userdata, taxconfig, queue):

        sbrate = taxconfig['yanglao'] + taxconfig['yiliao'] + taxconfig['shiye'] + taxconfig['gongshang'] + taxconfig['shengyu'] + taxconfig['gongjijin']
	
        for key, value in userdata.items():
        
            key = int(key)
            value = int(value)
            if value < float(taxconfig['jishul']):
               sbJS = float(taxconfig['jishul'])
            elif value > float(taxconfig['jishuh']):
                sbJS = float(taxconfig['jishuh'])
            else:
                sbJS = value
            sbJE = sbJS * sbrate
            taxJS = value - sbJE - 3500
            if taxJS < 0:
                tax = 0
                get = value - sbJE
            else:
                if taxJS <= 1500:
                    tax = taxJS * 0.03
                elif taxJS <= 4500:
                    tax = taxJS * 0.1 - 105
                elif taxJS <= 9000:
                    tax = taxJS *0.2 - 555
                elif taxJS <= 35000:
                    tax = taxJS *0.25 - 1005
                elif taxJS <= 55000:
                    tax = taxJS *0.3 - 2755
                elif taxJS <= 80000:
                    tax = taxJS *0.35 - 5505
                else:
                    tax = taxJS *0.45 - 13505
                get = value - tax - sbJE
            t = datetime.datetime.now()
            tim = datetime.datetime.strftime(t, '%Y-%m-%d %H:%M:%S')
            charl = '{},{},{:.2f},{:.2f},{:.2f},{}'.format(key, value, sbJE, tax, get, tim)
            self.usergongzi.append(charl.split(','))
        queue.put(self.usergongzi)

    
    def export(self, usergongzi, gongzif, default = 'csv'):
	
        result = usergongzi
        with open(gongzif, 'w') as f:
            writer = csv.writer(f)
            for x in result:
                writer.writerow(x)

if __name__ == '__main__':


    optlis, args = getopt.getopt(sys.argv[1:], '-h-C:-c:-d:-o:', ['help'])
    
    city = ''
    for opt_name, opt_value in optlis:
        
        if opt_name in ['-h', '--help']:
            print('Usage: calculator.py -C cityname -c configfile -d userdata -o resultdata')
            exit()
        if opt_name in ['-C']:
            city = opt_value.upper()
            
        if opt_name in ['-c']:
            cfgf = opt_value
        if opt_name in ['-d']:
            ursdf = opt_value
        if opt_name in ['-o']:
            ursgzf = opt_value
        
    Con = Config(cfgf, city)
    config = Con.config
    User = UserData()
    q1 = Queue()
    p1 = Process(target=User._update, args=(ursdf,q1,))
    p1.start()
    p1.join()
    
    cal = IncomeTaxCalculator()
    q2 = Queue()
    p2 = Process(target=cal.calc_for_all_userdata, args=(q1.get(), config, q2,))
    p2.start()
    p2.join()
    
    p3 = Process(target=cal.export, args=(q2.get(), ursgzf,))
    p3.start()
    p3.join()
