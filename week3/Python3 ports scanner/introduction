Python3 实现端口扫描器
介绍

端口扫描是一个常见的网络安全用语，它的意思是指客户端向一定范围的服务器端口发送请求，以此确认端口的开闭状态。端口扫描本身并不是恶意的网络活动，但也是网络攻击者探测目标主机服务，以利用该服务的已知漏洞的重要手段（维基百科）。在本次挑战中，我们将尝试使用 Python 编写一个端口扫描工具。
内容

使用 Python 编写一个端口扫描脚本，并可以通过添加参数的方式使其能实现对指定服务器地址，及指定端口/范围实现扫描。完成扫描后打印端口为开启状态的列表。

例如，当我们实现对 ip 为 220.181.57.216 的地址进行扫描时，程序执行过程如下：

$ python3 scan.py --host 220.181.57.216
Parameter Error
$ python3 scan.py --host 220.181.57.216 --port 80
80 open
$ python3 scan.py --host 220.181.57.216 --port 80-85
80 open
81 closed
82 closed
83 closed
84 closed
85 closed

特别地，我们使用 --host 指定服务器地址，使用 --port 指定端口的扫描范围。如图所示，80-100 指从 80 端口连续扫描的 100 端口。

本挑战推荐使用 python3 命令执行程序，执行过程中为了避免太长时间，可以使用实验环境本地的 127.0.0.1 地址进行测试，这个地址连接的是实验环境，也不要一次检测太多的端口：

此处输入图片的描述
目标

    你需要将代码保存到 /home/shiyanlou/Code/ 文件夹中，并以 scan.py 命名，即最终的代码文件为 /home/shiyanlou/Code/scan.py。
    如果参数数量不准确或者格式不正确，需要打印一行的错误信息：print("Parameter Error")
    IP 地址不属于 X.X.X.X 的格式，亦属于参数不准确，需要打印一行的错误信息：print("Parameter Error")。
    scan.py 可实现同时对单端口和指定端口范围扫描。

提示语

    sys 模块中的 sys.argv 可以用来处理参数，也可以使用 getopt 模块，相信经过第一周的课程，你对处理参数的方法已经非常熟悉了。
    验证端口是否开启的方法非常多，这里我们推荐使用 socket 模块建立与服务端的 TCP 链接进行确认。链接正常建立，端口即为开启状态，相反则为关闭状态。关于 socket 模块的使用，可以阅读 官方文档
    注意使用 socket 连接测试端口的时候必须设置超时时间，否则很容易造成挑战测试超时失败，设置的方法在创建 Socket 对象后设置超时时间为 0.1 秒。

        # 创建 socket 对象
        s = socket.socket()
        # 设置超时，防止脚本卡住
        s.settimeout(0.1)

挑战中遇到问题，请务必及时在讨论组里与助教及同组同学交流。
知识点

    Python3 基础语法
    Python3 Socket 网络编程
    网络基础知识
    安全基础知识
