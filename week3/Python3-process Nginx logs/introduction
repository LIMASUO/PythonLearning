Python3 处理 Nginx 日志
介绍

此处输入图片的描述

Nginx（发音同 Engine X）是一个流行的 Web 服务器，因其十分出色的性能表现，被众多的互联网公司所使用。实验楼的网站也使用了 Nginx，用户每一次向实验楼发起的请求都会被记录在 Nginx 的日志当中。本次挑战中，我们尝试通过 Python 编写脚本对 Nginx 日志文件进行处理，从包含大量数据的日志文件中得到我们需要的信息。

你可以通过在 Xfce 终端中进行下面的操作下载本次挑战使用的示例日志文件：

$ cd /home/shiyanlou/Code
$ wget http://labfile.oss.aliyuncs.com/courses/1013/week3/nginx.log

日志文件格式

nginx.log 日志文件由数千条日志数据组成，下面抽取一条真实数据对其构成进行介绍。

180.76.15.157 - - [09/Jan/2017:07:44:03 +0800] "GET /s?path=/sbin/lilo&project=linux-3.18.6 HTTP/1.1" 502 181 "-" "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)"

其中每个项目的说明：

    180.76.15.157：指的是远程客户端的 IP 地址。
    [09/Jan/2017:07:44:03 +0800]：包含请求的时间。
    GET：即 HTTP 请求的方式，一般有 GET，POST，PUT 等。
    /s?path=/sbin/lilo&project=linux-3.18.6：GET 后面带着请求资源的 URL 请求地址。记录服务器收到一个什么样的请求，请求的是什么内容。
    502：本次请求的状态码，502 指错误网关，成功为 200。
    最后包含有客户端浏览器的信息等其他内容。

内容

使用 Python 对给出的 nginx.log 日志文件进行处理。并得到以下信息：

    2017 年 1 月 11 日期间 GET 访问次数最多的 IP 地址及对应的访问次数，并以字典形式储存返回。例如：{'127.0.0.1': 356}。
    整个文件中，GET 请求状态为 404 最多的 URL 请求地址 及对应的请求次数，并以字典形式储存返回。例如：{'/favicon.ico': 10}。

目标

    你需要将代码保存到 /home/shiyanlou/Code 文件夹中，并以 challenge3_4.py 命名，即代码文件为 /home/shiyanlou/Code/challenge3_4.py。
    你需要得到挑战内容中的两部分信息，并完成下面的代码，返回两个字典，其中 ip_dict 中包含的信息为2017 年 1 月 11 日期间访问次数最多的 IP 地址及对应的访问次数，url_dict 包含的信息为GET 请求状态为 404 最多的 URL 请求地址 及对应的请求次数。

补充下面代码中的 TODO 部分：

# -*- coding: utf-8 -*-

import re 
from datetime import datetime

# 使用正则表达式解析日志文件，返回数据列表
def open_parser(filename):
    with open(filename) as logfile:
        # 使用正则表达式解析日志文件
        pattern = (r''
                   '(\d+.\d+.\d+.\d+)\s-\s-\s'  # IP 地址
                   '\[(.+)\]\s'  # 时间
                   '"GET\s(.+)\s\w+/.+"\s'  # 请求路径
                   '(\d+)\s'  # 状态码
                   '(\d+)\s'  # 数据大小
                   '"(.+)"\s'  # 请求头
                   '"(.+)"'  # 客户端信息
                   )
        parsers = re.findall(pattern, logfile.read())
    return parsers

def main():

    # 使用正则表达式解析日志文件
    logs = open_parser('/home/shiyanlou/Code/nginx.log')

    '''
    1. 解析文件就是分离不同类型数据（IP，时间，状态码等）
    2. 从解析后的文件中统计挑战需要的信息
    '''
    TODO

    return ip_dict, url_dict


if __name__ == '__main__':
    ip_dict, url_dict = main()
    print(ip_dict, url_dict)

提示语

    使用到正则表达式对文件内容进行解析，Python 中的 re 模块会非常有用。详细使用请阅读 官方文档 或 一篇不错的博文。虽然题目给出了示例代码，但正则表达式在后续的项目中仍然会多次用到，推荐理解示例代码中的每一行内容。
    可能会使用到 datetime 模块对时间信息进行处理。详细使用请阅读 官方文档。
    注意，"GET /s?path=/sbin/lilo&project=linux-3.18.6 HTTP/1.1" 这段日志中，我们需要的请求 url 地址为 /s?path=/sbin/lilo&project=linux-3.18.6，不包括 HTTP/1.1。

挑战中遇到问题，请务必及时在讨论组里与助教及同组同学交流。
知识点

    Python3 文本处理
    Python3 文件操作
    Nginx 日志格式
    Python3 正则表达式基本使用

