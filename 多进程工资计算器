#!usr/bin/env python3

import sys
import csv
import os
from multiprocessing import Process, Queue

# Acquire the pathes of social security & tax configuration file, employee's 
# data file, and the file storing the actual paied money & money deducted. 

class Args(object):
    
    def __init__(self, args):
        
        self.configfile = []
        self.userdatafile = []
        self.gongzifile = []
        self._update(args)

    def _update(self, args):

        for arg in args:
            index = args.index(arg) + 1
            if arg == '-c':
                self.configfile = args[index]
            if arg == '-d':
                self.userdatafile = args[index]
            if arg == '-o':
                self.gongzifile = args[index]


# read the social security & tax configuration and store in a dictionary

class Config(object):

    def __init__(self, configfile):
        
        self.config = {}
        self._update(configfile)

    def _update(self, configfile):

        try:
            fil = open(configfile, 'r')
     
            for x in fil:
                str_ = x.strip()
                key, value = str_.split('=')
                key = key.strip()
                value = value.strip()
                self.config[key] = float(value)
            fil.close()
            return self.config

        except IOError:
            print('file does not exist or can not be read')
            exit()


# read the employee's data, and store in a dictionary

class UserData():

    def __init__(self):

        self.userdata = {}       
        
    def _update(self, userdatafile, queue):
	
        try:
            file_ = open(userdatafile, 'r')
            for i, x in enumerate(file_):
                key, value = x.split(',')
                self.userdata[key] = int(value)
            file_.close()
            queue.put(self.userdata)
        
        except IOError:
            print('file does not exit or can not be read')
            exit()

# Calculate all the tax and social security charge, put each employee's
# result into a list as a sublist.

class IncomeTaxCalculator():

    def __init__(self):

        self.usergongzi = []

    def calc_for_all_userdata(self, userdata, taxconfig, queue):

        sbrate = taxconfig['YangLao'] + taxconfig['YiLiao'] + taxconfig['ShiYe'] + taxconfig['GongShang'] + taxconfig['ShengYu'] + taxconfig['GongJiJin']
	
        for key, value in userdata.items():
        
            key = int(key)
            value = int(value)
            if value < float(taxconfig['JiShuL']):
               sbJS = float(taxconfig['JiShuL'])
            elif value > float(taxconfig['JiShuH']):
                sbJS = float(taxconfig['JiShuH'])
            else:
                sbJS = value
            sbJE = sbJS * sbrate
            taxJS = value - sbJE - 3500
            if taxJS < 0:
                tax = 0
                get = value - sbJE
            else:
                if taxJS <= 1500:
                    tax = taxJS * 0.03
                elif taxJS <= 4500:
                    tax = taxJS * 0.1 - 105
                elif taxJS <= 9000:
                    tax = taxJS *0.2 - 555
                elif taxJS <= 35000:
                    tax = taxJS *0.25 - 1005
                elif taxJS <= 55000:
                    tax = taxJS *0.3 - 2755
                elif taxJS <= 80000:
                    tax = taxJS *0.35 - 5505
                else:
                    tax = taxJS *0.45 - 13505
                get = value - tax - sbJE
            charl = '{},{},{:.2f},{:.2f},{:.2f}'.format(key, value, sbJE, tax, get)
            self.usergongzi.append(charl.split(','))
        queue.put(self.usergongzi)

    
    def export(self, usergongzi, gongzif, default = 'csv'):
	
        result = usergongzi
        with open(gongzif, 'w') as f:
            writer = csv.writer(f)
            for x in result:
                writer.writerow(x)

if __name__ == '__main__':
    
    a = sys.argv[1:]
    Arg = Args(a)
    cfgf = Arg.configfile
    ursdf = Arg.userdatafile
    ursgzf = Arg.gongzifile
    Con = Config(cfgf)
    config = Con.config
    User = UserData()
    q1 = Queue()
    p1 = Process(target=User._update, args=(ursdf,q1,))
    p1.start()
    p1.join()
    
    cal = IncomeTaxCalculator()
    q2 = Queue()
    p2 = Process(target=cal.calc_for_all_userdata, args=(q1.get(), config, q2,))
    p2.start()
    p2.join()
    
    p3 = Process(target=cal.export, args=(q2.get(), ursgzf,))
    p3.start()
    p3.join()
